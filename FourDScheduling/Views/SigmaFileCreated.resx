<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>